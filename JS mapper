function solution(commands) {
    const commmandMap = {
        create: (acc, name, _, inheritName) => {

            if (!inheritName) {
                acc[name] = {};
                return acc;
            }
            const parent = acc[inheritName];
            acc[name] = Object.create(parent);
            return acc;
        },

        set: (acc, name, propName, propValue) => {

            acc[name][propName] = propValue;
            return acc;
        },

        print: (acc,name) => {
            let result = '';
            Object.keys(acc[name]).forEach(console.log)

            Object.keys(acc).forEach((item,index,items) => {
                let itemss = [];
                 for( let a in acc[item]){
            itemss.push( `${a}:${acc[item][a]}`);
            }
            result += itemss.join(`\n`);
            if(index !== items.length -1){
                result += ', ';
            }
            });
            console.log(result);

            return acc;
        }
    };
    return commands.reduce((acc,currCommand)=> {
        const[op, v1 ,v2 ,v3] = currCommand.split(' ');
          return commmandMap[op](acc,v1,v2,v3);
    },{});

}

solution(['create c1',
    'create c2 inherit c1',
    'set c1 color red',
    'set c2 model new',
    'print c1',
    'print c2']);

