function lookupChar(string, index) {
    if (typeof (string) !== 'string' || !Number.isInteger(index)) {
        return undefined;
    }
    if (string.length <= index || index < 0) {
        return "Incorrect index";
    }

    return string.charAt(index);
}
const expect = require('chai').expect;

describe('Main', () => {
    describe('Invalid parameters', () => {
        it('should return undefine for non-string first param', () => {
            expect(lookupChar(null, 0)).to.equal(undefined);
        });
        it('should return undefine for non-number first param', () => {
            expect(lookupChar('seagul', 'z')).to.equal(undefined);
        });
    });
    describe('Out of range', () => {
        it('should return undefined below 0', () => {
            expect(lookupChar('seagull', -1)).to.equal('Incorrect index');
        });

        it('should return undefined below 0', () => {
            expect(lookupChar('seagull', 8)).to.equal('Incorrect index');
        });
    });

    describe('happy path',() => {
       it('should return s', () =>{
          expect(lookupChar('seagull',0)).to.equal('s');
       });

       it('should return a', () =>{
        expect(lookupChar('seagull',2)).to.equal('a');
     });

     it('should return s', () =>{
        expect(lookupChar('testString',4)).to.equal('S');
     });


    });




});
